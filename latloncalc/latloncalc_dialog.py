# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatLongCalcDialog
                                 A QGIS plugin
 Converts DMS to Decimal Degree
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-04-15
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Geobusters Akademie
        email                : torsten.genz@geobusters.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'latloncalc_dialog_base.ui'))


class LatLongCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatLongCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.sbLatD.valueChanged.connect(self.latDMStoDD)
        self.sbLatM.valueChanged.connect(self.latDMStoDD)
        self.sbLatS.valueChanged.connect(self.latDMStoDD)
        
        self.sbLonD.valueChanged.connect(self.lonDMStoDD)
        self.sbLonM.valueChanged.connect(self.lonDMStoDD)
        self.sbLonS.valueChanged.connect(self.lonDMStoDD)   
        
        self.dsbLatDD.valueChanged.connect(self.DDtoLatDMS)
        #self.dsbLonDD.editingFinished.connect(self.DDtoLonDMS)
        
        self.splitHorizontalScrollBar.valueChanged.connect(self.shsb)
        
    def shsb(self):
         self.counterSplitHorizontalBarSliderLbl.setText(str(self.splitHorizontalScrollBar.value()))
            
        
    def latDMStoDD(self):
        latdeg=float(self.sbLatD.value())
        latmin=float(self.sbLatM.value())/60
        latsec=float(self.sbLatS.value())/3600
        self.dsbLatDD.setValue(latdeg+latmin+latsec)
        
    def lonDMStoDD(self):
        londeg=float(self.sbLonD.value())
        lonmin=float(self.sbLonM.value())/60
        lonsec=float(self.sbLonS.value())/3600
        self.dsbLonDD.setValue(londeg+lonmin+lonsec)
        
    def DDtoLatDMS(self):
        self.label_35.setText(str(self.dsbLatDD.value()))
    # def DDtoLonDMS(self):
    #    a=0
